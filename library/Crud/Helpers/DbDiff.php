<?php
/**
 * must define $_metadata and the ctor !!!
 *//**
 * Class Name
 *
 * @category  Crud class
 * @package   Crud
 * @author    elvis ciotti <elvis@phpntips.com>
 * @copyright 2010 Phpntips.com
 * @license   http://framework.zend.com/license/new-bsd  New BSD License
 * @version   Release: 1.0
 * @link      http://www.phpntips.com/crud
 */

class Crud_Helpers_DbDiff
{

    /**
     * Export the schema of the database into an array.
     *
     * @param string $config Config details for the database connection.
     * @param string $name Name or description of the database.
     * @return mixed|string An array structure of the exported schema, or an
     *  error string.
     */
    public function export($config, $name)
    {

        $db = mysql_connect(
            $config['host'], $config['user'],
            $config['password']
        ) or die;

        if (!$db) {
            die('Could not connect: ' . mysql_error());
        }

        if (!mysql_select_db($config['name'], $db)) {
            die('cannot select db '.$config['name'] .'-'. mysql_error());
        }

        $result = mysql_query("SHOW TABLE STATUS");
        while ($row = mysql_fetch_assoc($result)) {
            $tablesProp[$row['Name']] = $row;
            //'Engine', 'Create_options', 'Row_format', 'Engine', 'Version'
        }

        $result = mysql_query("SHOW TABLES");
        while ($row = mysql_fetch_row($result)) {
            $tables[$row[0]] = array();
        }

        foreach ($tables as $tableName => $fields) {

            $result = mysql_query(
                "SHOW  FULL  COLUMNS FROM `".$tableName
                . "`", $db
            ) or die(mysql_error());
            while ($row = mysql_fetch_assoc($result)) {
                unset($row['Privileges']);
                unset($row['Comment ']);
                $tables[$tableName][$row['Field']] = $row;
            }
            //add table props
            $tables[$tableName]['TABLE_PROPERTY'] = array(
                'Engine' => $tablesProp[$tableName]['Engine'],
                'Version' => $tablesProp[$tableName]['Version'],
                'Row_format' =>
                    $tablesProp[$tableName]['Row_format'],
                'Collation' =>
                    $tablesProp[$tableName]['Collation'],
            );

        }

        $data = array(
            'name' => $name,
            'time' => time(),
            'tables' => $tables,
            'tablesPROP' => $tablesProp
        );

        return $data;
    }

    /**
     * Compare two schemas (as generated by the 'export' method.)
     *
     * @param string $schemaOne The first database schema.
     * @param string $schemaTwo The second database schema.
     * @return void
     */
    function compare($schemaOne, $schemaTwo)
    {

        $tablesOne = array_keys($schemaOne['tables']);
        $tablesTwo = array_keys($schemaTwo['tables']);

        $tables = array_unique(array_merge($tablesOne, $tablesTwo));

        $results = array();

        foreach ($tables as $tableName) {

            // Check tables exist in both databases

            if (!isset($schemaOne['tables'][$tableName])) {

                $results[$tableName][] = '<em>' . $schemaOne['name']
                    . '</em> is missing table: <code>' . $tableName
                    . '</code>.';

                continue;
            }

            if (!isset($schemaTwo['tables'][$tableName])) {

                $results[$tableName][] = '<em>' . $schemaTwo['name']
                    . '</em> is missing table: <code>' . $tableName
                    . '</code>.';

                continue;
            }

            // Check fields exist in both tables

            $fields = array_merge(
                $schemaOne['tables'][$tableName],
                $schemaTwo['tables'][$tableName]
            );

            foreach ($fields as $fieldName => $field) {

                if (!isset($schemaOne['tables'][$tableName][$fieldName])) {

                    $results[$tableName][] = '<em>' . $schemaOne['name']
                        . '</em> is missing field: <code>' . $fieldName
                        . '</code>';

                    continue;
                }

                if (!isset($schemaTwo['tables'][$tableName][$fieldName])) {

                    $results[$tableName][] = '<em>' . $schemaTwo['name']
                        . '</em> is missing field: <code>' . $fieldName
                        . '</code>';

                    continue;
                }

                // Check that the specific parameters of the fields match

                $sOneParams = $schemaOne['tables'][$tableName][$fieldName];
                $sTwoParams = $schemaTwo['tables'][$tableName][$fieldName];

                foreach ($sOneParams as $name => $details) {
                    if ($sOneParams[$name] != $sTwoParams[$name]) {
                        $results[$tableName][] =
                            ($fieldName=='TABLE_PROPERTY' ? '' : 'Field')
                            . ' <code>' . $fieldName
                            . '</code> differs between databases for param \''
                            . $name . '\'. <em>' . $schemaOne['name']
                            . '</em> has \'' . $sOneParams[$name]
                            . '\' and <em>' . $schemaTwo['name']
                            . '</em> has \'' . $sTwoParams[$name] . '\'.';
                    }
                }
            }
        }

        return $results;
    }
}